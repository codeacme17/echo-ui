import{p,x as N,T as k,S as z,W as V,$ as g,U as W,A as E,c as i}from"./index.a54ae35d.js";import o from"react";import{S as m,o as a,G as r,c as M,a as x,M as H,b as O,d as I,T as f,P as d,O as T,e as U,r as S,f as $,W as B}from"./index.3fdeaba1.js";import{jsxs as y,jsx as e}from"react/jsx-runtime";import{P as Q}from"./pause.0e546ef8.js";import{P as Z}from"./play.04387a46.js";import{F as J}from"./Filter.9ff151a0.js";class C extends m{constructor(){super(Object.assign(a(C.getDefaults(),arguments,["value"]))),this.override=!1,this.name="Add",this._sum=new r({context:this.context}),this.input=this._sum,this.output=this._sum,this.addend=this._param,M(this._constantSource,this._sum)}static getDefaults(){return Object.assign(m.getDefaults(),{value:0})}dispose(){return super.dispose(),this._sum.dispose(),this}}class b extends x{constructor(){super(Object.assign(a(b.getDefaults(),arguments,["min","max"]))),this.name="Scale";const t=a(b.getDefaults(),arguments,["min","max"]);this._mult=this.input=new H({context:this.context,value:t.max-t.min}),this._add=this.output=new C({context:this.context,value:t.min}),this._min=t.min,this._max=t.max,this.input.connect(this.output)}static getDefaults(){return Object.assign(x.getDefaults(),{max:1,min:0})}get min(){return this._min}set min(t){this._min=t,this._setRange()}get max(){return this._max}set max(t){this._max=t,this._setRange()}_setRange(){this._add.value=this._min,this._mult.value=this._max-this._min}dispose(){return super.dispose(),this._add.dispose(),this._mult.dispose(),this}}class L extends x{constructor(){super(Object.assign(a(L.getDefaults(),arguments))),this.name="Zero",this._gain=new r({context:this.context}),this.output=this._gain,this.input=void 0,O(this.context.getConstant(0),this._gain)}dispose(){return super.dispose(),I(this.context.getConstant(0),this._gain),this}}class v extends f{constructor(){super(a(v.getDefaults(),arguments,["frequency","min","max"])),this.name="LFO",this._stoppedValue=0,this._units="number",this.convert=!0,this._fromType=d.prototype._fromType,this._toType=d.prototype._toType,this._is=d.prototype._is,this._clampValue=d.prototype._clampValue;const t=a(v.getDefaults(),arguments,["frequency","min","max"]);this._oscillator=new T(t),this.frequency=this._oscillator.frequency,this._amplitudeGain=new r({context:this.context,gain:t.amplitude,units:"normalRange"}),this.amplitude=this._amplitudeGain.gain,this._stoppedSignal=new m({context:this.context,units:"audioRange",value:0}),this._zeros=new L({context:this.context}),this._a2g=new U({context:this.context}),this._scaler=this.output=new b({context:this.context,max:t.max,min:t.min}),this.units=t.units,this.min=t.min,this.max=t.max,this._oscillator.chain(this._amplitudeGain,this._a2g,this._scaler),this._zeros.connect(this._a2g),this._stoppedSignal.connect(this._a2g),S(this,["amplitude","frequency"]),this.phase=t.phase}static getDefaults(){return Object.assign(T.getDefaults(),{amplitude:1,frequency:"4n",max:1,min:0,type:"sine",units:"number"})}start(t){return t=this.toSeconds(t),this._stoppedSignal.setValueAtTime(0,t),this._oscillator.start(t),this}stop(t){return t=this.toSeconds(t),this._stoppedSignal.setValueAtTime(this._stoppedValue,t),this._oscillator.stop(t),this}sync(){return this._oscillator.sync(),this._oscillator.syncFrequency(),this}unsync(){return this._oscillator.unsync(),this._oscillator.unsyncFrequency(),this}_setStoppedValue(){this._stoppedValue=this._oscillator.getInitialValue(),this._stoppedSignal.value=this._stoppedValue}get min(){return this._toType(this._scaler.min)}set min(t){t=this._fromType(t),this._scaler.min=t}get max(){return this._toType(this._scaler.max)}set max(t){t=this._fromType(t),this._scaler.max=t}get type(){return this._oscillator.type}set type(t){this._oscillator.type=t,this._setStoppedValue()}get partials(){return this._oscillator.partials}set partials(t){this._oscillator.partials=t,this._setStoppedValue()}get phase(){return this._oscillator.phase}set phase(t){this._oscillator.phase=t,this._setStoppedValue()}get units(){return this._units}set units(t){const n=this.min,h=this.max;this._units=t,this.min=n,this.max=h}get state(){return this._oscillator.state}connect(t,n,h){return(t instanceof d||t instanceof m)&&(this.convert=t.convert,this.units=t.units),$(this,t,n,h),this}dispose(){return super.dispose(),this._oscillator.dispose(),this._stoppedSignal.dispose(),this._zeros.dispose(),this._scaler.dispose(),this._a2g.dispose(),this._amplitudeGain.dispose(),this.amplitude.dispose(),this}}class K extends x{constructor(){super(...arguments),this.name="GainToAudio",this._norm=new B({context:this.context,mapping:t=>Math.abs(t)*2-1}),this.input=this._norm,this.output=this._norm}dispose(){return super.dispose(),this._norm.dispose(),this}}class w extends f{constructor(){super(Object.assign(a(w.getDefaults(),arguments,["fade"]))),this.name="CrossFade",this._panner=this.context.createStereoPanner(),this._split=this.context.createChannelSplitter(2),this._g2a=new K({context:this.context}),this.a=new r({context:this.context,gain:0}),this.b=new r({context:this.context,gain:0}),this.output=new r({context:this.context}),this._internalChannels=[this.a,this.b];const t=a(w.getDefaults(),arguments,["fade"]);this.fade=new m({context:this.context,units:"normalRange",value:t.fade}),S(this,"fade"),this.context.getConstant(1).connect(this._panner),this._panner.connect(this._split),this._panner.channelCount=1,this._panner.channelCountMode="explicit",O(this._split,this.a.gain,0),O(this._split,this.b.gain,1),this.fade.chain(this._g2a,this._panner.pan),this.a.connect(this.output),this.b.connect(this.output)}static getDefaults(){return Object.assign(f.getDefaults(),{fade:.5})}dispose(){return super.dispose(),this.a.dispose(),this.b.dispose(),this.output.dispose(),this.fade.dispose(),this._g2a.dispose(),this._panner.disconnect(),this._split.disconnect(),this}}class A extends f{constructor(t){super(t),this.name="Effect",this._dryWet=new w({context:this.context}),this.wet=this._dryWet.fade,this.effectSend=new r({context:this.context}),this.effectReturn=new r({context:this.context}),this.input=new r({context:this.context}),this.output=this._dryWet,this.input.fan(this._dryWet.a,this.effectSend),this.effectReturn.connect(this._dryWet.b),this.wet.setValueAtTime(t.wet,0),this._internalChannels=[this.effectReturn,this.effectSend],S(this,"wet")}static getDefaults(){return Object.assign(f.getDefaults(),{wet:1})}connectEffect(t){return this._internalChannels.push(t),this.effectSend.chain(t,this.effectReturn),this}dispose(){return super.dispose(),this._dryWet.dispose(),this.effectSend.dispose(),this.effectReturn.dispose(),this.wet.dispose(),this}}class R extends A{constructor(t){super(t),this.name="LFOEffect",this._lfo=new v({context:this.context,frequency:t.frequency,amplitude:t.depth}),this.depth=this._lfo.amplitude,this.frequency=this._lfo.frequency,this.type=t.type,S(this,["frequency","depth"])}static getDefaults(){return Object.assign(A.getDefaults(),{frequency:1,type:"sine",depth:1})}start(t){return this._lfo.start(t),this}stop(t){return this._lfo.stop(t),this}sync(){return this._lfo.sync(),this}unsync(){return this._lfo.unsync(),this}get type(){return this._lfo.type}set type(t){this._lfo.type=t}dispose(){return super.dispose(),this._lfo.dispose(),this.frequency.dispose(),this.depth.dispose(),this}}class q extends R{constructor(){super(a(q.getDefaults(),arguments,["frequency","baseFrequency","octaves"])),this.name="AutoFilter";const t=a(q.getDefaults(),arguments,["frequency","baseFrequency","octaves"]);this.filter=new J(Object.assign(t.filter,{context:this.context})),this.connectEffect(this.filter),this._lfo.connect(this.filter.frequency),this.octaves=t.octaves,this.baseFrequency=t.baseFrequency}static getDefaults(){return Object.assign(R.getDefaults(),{baseFrequency:200,octaves:2.6,filter:{type:"lowpass",rolloff:-12,Q:1}})}get baseFrequency(){return this._lfo.min}set baseFrequency(t){this._lfo.min=this.toFrequency(t),this.octaves=this._octaves}get octaves(){return this._octaves}set octaves(t){this._octaves=t,this._lfo.max=this._lfo.min*Math.pow(2,t)}dispose(){return super.dispose(),this.filter.dispose(),this}}const X=()=>{const[s,t]=o.useState("sine"),[n,h]=o.useState(1),[c,P]=o.useState(.7),[D,j]=o.useState(!1),F=o.useRef(null),_=o.useRef(null);o.useEffect(()=>{F.current=new q({frequency:n,depth:1}).toDestination().start(),_.current=new T({volume:-(1-c)*100,frequency:n}).connect(F.current)},[]),o.useEffect(()=>{var u,l;(u=F.current)==null||u.set({frequency:n}),(l=_.current)==null||l.set({type:s,frequency:440,volume:-(1-c)*60})},[s,n,c]);const G=()=>{var u,l;D?((u=_.current)==null||u.stop(),j(!1)):((l=_.current)==null||l.start(),j(!0))};return y("section",{className:"h-32 mb-32 mx-auto",children:[y(p.Group,{className:"mb-2",radius:"sm",children:[e(p,{toggled:s==="sine",onClick:()=>t("sine"),children:e(N,{})}),e(p,{toggled:s==="square",onClick:()=>t("square"),children:e(k,{})}),e(p,{toggled:s==="triangle",onClick:()=>t("triangle"),children:e(z,{})}),e(p,{onClick:G,toggled:D,className:"data-[toggled='true']:bg-green-500",children:D?e(Q,{className:"fill-current",size:15}):e(Z,{className:"fill-current",size:15})})]}),e(V,{amplitude:c,frequency:n,type:s}),y(g.Group,{className:"mt-2 flex justify-center",size:40,trackWidth:3,pointerHeight:6,children:[e(g,{value:n,onChange:h,topLabel:"Frequency",min:1,max:15,step:1,bottomLabel:n+"Hz"}),e(g,{className:"mr-3",value:c,min:0,max:1,step:.1,onChange:P,topLabel:"Amplitude",bottomLabel:c*100+"%"})]})]})},Y=()=>{const[s,t]=o.useState(1);return y("section",{className:"",children:[e(V,{delay:s,className:"h-32",frequency:2}),e(g,{value:s,onChange:t,className:"mt-3",topLabel:"Delay",min:1,max:1e3,step:1,sensitivity:10,size:40,trackWidth:3,pointerHeight:6,bottomLabel:s+"ms"})]})},rt=()=>e(W,{code:"<LFODefault />",scope:{LFODefault:X},type:"link",url:"https://github.com/codeacme17/echo-ui/blob/main/docs/src/components/Example/LFODefault.tsx"}),ct=()=>e(W,{code:"<LFODelay />",scope:{LFODelay:Y},type:"link",url:"https://github.com/codeacme17/echo-ui/blob/main/docs/src/components/Example/LFODelay.tsx"}),ht=()=>e(E,{data:[{attribute:"frequency",description:"Controls the frequency of the waveform in Hertz (Hz). Frequency determines the number of cycles per second.",type:e(i,{children:"number"}),default:e(i,{children:"1"})},{attribute:"amplitude",description:"Controls the amplitude of the waveform. Amplitude determines the height of the waveform's peak. (range: 0-1)",type:e(i,{children:"number"}),default:e(i,{children:"0"})},{attribute:"delay",description:"Sets the delay time before the waveform starts, in milliseconds (ms). This can be used to create a pause effect before the waveform begins. (range: 0-1000)",type:e(i,{children:"number"}),default:e(i,{children:"0"})},{attribute:"type",description:"Specifies the type of the waveform. Options include sine wave ('sine'), square wave ('square'), and triangle wave ('triangle').",type:e(i,{children:"'sine' | 'square' | 'triangle'"}),default:e(i,{children:"'sine'"})},{attribute:"lineColor",description:"Sets the color of the waveform line. Can be any valid CSS color value.",type:e(i,{children:"string"}),default:e(i,{children:"'var(--echo-primary)'"})},{attribute:"lineWidth",description:"Determines the thickness of the waveform line, in pixels.",type:e(i,{children:"number"}),default:e(i,{children:"3"})}]});export{rt as D,ht as L,ct as a};
