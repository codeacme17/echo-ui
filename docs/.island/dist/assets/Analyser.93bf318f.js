import{T as n,o as i,G as h,a as o,b as l}from"./index.5a6550a4.js";class a extends n{constructor(){super(i(a.getDefaults(),arguments,["channels"])),this.name="Split";const t=i(a.getDefaults(),arguments,["channels"]);this._splitter=this.input=this.output=this.context.createChannelSplitter(t.channels),this._internalChannels=[this._splitter]}static getDefaults(){return Object.assign(n.getDefaults(),{channels:2})}dispose(){return super.dispose(),this._splitter.disconnect(),this}}class r extends n{constructor(){super(i(r.getDefaults(),arguments,["type","size"])),this.name="Analyser",this._analysers=[],this._buffers=[];const t=i(r.getDefaults(),arguments,["type","size"]);this.input=this.output=this._gain=new h({context:this.context}),this._split=new a({context:this.context,channels:t.channels}),this.input.connect(this._split),o(t.channels,1);for(let s=0;s<t.channels;s++)this._analysers[s]=this.context.createAnalyser(),this._split.connect(this._analysers[s],s,0);this.size=t.size,this.type=t.type}static getDefaults(){return Object.assign(n.getDefaults(),{size:1024,smoothing:.8,type:"fft",channels:1})}getValue(){return this._analysers.forEach((t,s)=>{const e=this._buffers[s];this._type==="fft"?t.getFloatFrequencyData(e):this._type==="waveform"&&t.getFloatTimeDomainData(e)}),this.channels===1?this._buffers[0]:this._buffers}get size(){return this._analysers[0].frequencyBinCount}set size(t){this._analysers.forEach((s,e)=>{s.fftSize=t*2,this._buffers[e]=new Float32Array(t)})}get channels(){return this._analysers.length}get type(){return this._type}set type(t){l(t==="waveform"||t==="fft",`Analyser: invalid type: ${t}`),this._type=t}get smoothing(){return this._analysers[0].smoothingTimeConstant}set smoothing(t){this._analysers.forEach(s=>s.smoothingTimeConstant=t)}dispose(){return super.dispose(),this._analysers.forEach(t=>t.disconnect()),this._split.dispose(),this._gain.dispose(),this}}export{r as A,a as S};
