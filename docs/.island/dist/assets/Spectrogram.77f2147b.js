import{w as M,J as V,Q as J,d as k,f as G,F,U as z,A as U,c as s}from"./index.6a66cf71.js";import o from"react";import{jsxs as O,jsx as t}from"react/jsx-runtime";import{T as d,o as g,P as Q,a as E,G as I,S as T,r as Y,c as X,w as Z,i as K,b as ee,d as te}from"./index.87519544.js";class b extends d{constructor(){super(g(b.getDefaults(),arguments,["frequency","type"])),this.name="BiquadFilter";const e=g(b.getDefaults(),arguments,["frequency","type"]);this._filter=this.context.createBiquadFilter(),this.input=this.output=this._filter,this.Q=new Q({context:this.context,units:"number",value:e.Q,param:this._filter.Q}),this.frequency=new Q({context:this.context,units:"frequency",value:e.frequency,param:this._filter.frequency}),this.detune=new Q({context:this.context,units:"cents",value:e.detune,param:this._filter.detune}),this.gain=new Q({context:this.context,units:"decibels",convert:!1,value:e.gain,param:this._filter.gain}),this.type=e.type}static getDefaults(){return Object.assign(d.getDefaults(),{Q:1,type:"lowpass",frequency:350,detune:0,gain:0})}get type(){return this._filter.type}set type(e){E(["lowpass","highpass","bandpass","lowshelf","highshelf","notch","allpass","peaking"].indexOf(e)!==-1,`Invalid filter type: ${e}`),this._filter.type=e}getFrequencyResponse(e=128){const n=new Float32Array(e);for(let i=0;i<e;i++){const h=Math.pow(i/e,2)*(2e4-20)+20;n[i]=h}const r=new Float32Array(e),c=new Float32Array(e),a=this.context.createBiquadFilter();return a.type=this.type,a.Q.value=this.Q.value,a.frequency.value=this.frequency.value,a.gain.value=this.gain.value,a.getFrequencyResponse(n,r,c),r}dispose(){return super.dispose(),this._filter.disconnect(),this.Q.dispose(),this.frequency.dispose(),this.gain.dispose(),this.detune.dispose(),this}}class x extends d{constructor(){super(g(x.getDefaults(),arguments,["frequency","type","rolloff"])),this.name="Filter",this.input=new I({context:this.context}),this.output=new I({context:this.context}),this._filters=[];const e=g(x.getDefaults(),arguments,["frequency","type","rolloff"]);this._filters=[],this.Q=new T({context:this.context,units:"positive",value:e.Q}),this.frequency=new T({context:this.context,units:"frequency",value:e.frequency}),this.detune=new T({context:this.context,units:"cents",value:e.detune}),this.gain=new T({context:this.context,units:"decibels",convert:!1,value:e.gain}),this._type=e.type,this.rolloff=e.rolloff,Y(this,["detune","frequency","gain","Q"])}static getDefaults(){return Object.assign(d.getDefaults(),{Q:1,detune:0,frequency:350,gain:0,rolloff:-12,type:"lowpass"})}get type(){return this._type}set type(e){E(["lowpass","highpass","bandpass","lowshelf","highshelf","notch","allpass","peaking"].indexOf(e)!==-1,`Invalid filter type: ${e}`),this._type=e,this._filters.forEach(r=>r.type=e)}get rolloff(){return this._rolloff}set rolloff(e){const n=K(e)?e:parseInt(e,10),r=[-12,-24,-48,-96];let c=r.indexOf(n);E(c!==-1,`rolloff can only be ${r.join(", ")}`),c+=1,this._rolloff=n,this.input.disconnect(),this._filters.forEach(a=>a.disconnect()),this._filters=new Array(c);for(let a=0;a<c;a++){const i=new b({context:this.context});i.type=this._type,this.frequency.connect(i.frequency),this.detune.connect(i.detune),this.Q.connect(i.Q),this.gain.connect(i.gain),this._filters[a]=i}this._internalChannels=this._filters,X(this.input,...this._internalChannels,this.output)}getFrequencyResponse(e=128){const n=new b({frequency:this.frequency.value,gain:this.gain.value,Q:this.Q.value,type:this._type,detune:this.detune.value}),r=new Float32Array(e).map(()=>1);return this._filters.forEach(()=>{n.getFrequencyResponse(e).forEach((a,i)=>r[i]*=a)}),n.dispose(),r}dispose(){return super.dispose(),this._filters.forEach(e=>{e.dispose()}),Z(this,["detune","frequency","gain","Q"]),this.frequency.dispose(),this.Q.dispose(),this.detune.dispose(),this.gain.dispose(),this}}class C extends d{constructor(){super(g(C.getDefaults(),arguments,["channels"])),this.name="Split";const e=g(C.getDefaults(),arguments,["channels"]);this._splitter=this.input=this.output=this.context.createChannelSplitter(e.channels),this._internalChannels=[this._splitter]}static getDefaults(){return Object.assign(d.getDefaults(),{channels:2})}dispose(){return super.dispose(),this._splitter.disconnect(),this}}class R extends d{constructor(){super(g(R.getDefaults(),arguments,["type","size"])),this.name="Analyser",this._analysers=[],this._buffers=[];const e=g(R.getDefaults(),arguments,["type","size"]);this.input=this.output=this._gain=new I({context:this.context}),this._split=new C({context:this.context,channels:e.channels}),this.input.connect(this._split),ee(e.channels,1);for(let n=0;n<e.channels;n++)this._analysers[n]=this.context.createAnalyser(),this._split.connect(this._analysers[n],n,0);this.size=e.size,this.type=e.type}static getDefaults(){return Object.assign(d.getDefaults(),{size:1024,smoothing:.8,type:"fft",channels:1})}getValue(){return this._analysers.forEach((e,n)=>{const r=this._buffers[n];this._type==="fft"?e.getFloatFrequencyData(r):this._type==="waveform"&&e.getFloatTimeDomainData(r)}),this.channels===1?this._buffers[0]:this._buffers}get size(){return this._analysers[0].frequencyBinCount}set size(e){this._analysers.forEach((n,r)=>{n.fftSize=e*2,this._buffers[r]=new Float32Array(e)})}get channels(){return this._analysers.length}get type(){return this._type}set type(e){E(e==="waveform"||e==="fft",`Analyser: invalid type: ${e}`),this._type=e}get smoothing(){return this._analysers[0].smoothingTimeConstant}set smoothing(e){this._analysers.forEach(n=>n.smoothingTimeConstant=e)}dispose(){return super.dispose(),this._analysers.forEach(e=>e.disconnect()),this._split.dispose(),this._gain.dispose(),this}}const se=()=>{const p="/audios/loop-2.mp3",{audioBuffer:e,pending:n,fetchAudio:r}=M({url:p}),{analyser:c,data:a,init:i,observe:y,cancelObserve:h}=V({fftSize:512}),{isPlaying:l,init:w,play:_,stop:q}=J({onPlay:()=>y(),onPause:()=>h(),onStop:()=>h()});return o.useEffect(()=>{r(),i()},[]),o.useEffect(()=>{!c.current||w(e,[c.current])},[e,c.current]),O("div",{className:"flex flex-col items-center gap-2",children:[t(k,{className:"w-full",data:a}),t(G,{onClick:async()=>{l?q():_()},disabled:n,toggled:l,children:l?"Stop":"Start"})]})},ne=()=>{const p="/audios/loop-2.mp3",[e,n]=o.useState([]),[r,c]=o.useState(!1),a=o.useRef(),i=o.useRef(null),y=o.useRef(null),h=o.useRef(null),l=o.useRef(null),w=512/2,_=300,q=1500,L=4e3,[v,H]=o.useState(0),[S,W]=o.useState(0),[D,j]=o.useState(0);o.useEffect(()=>{var u,f;return i.current=new te(p),a.current=new R("fft",w),y.current=new x(_,"lowshelf"),h.current=new x(q,"peaking"),l.current=new x(L,"highshelf"),i.current.connect(y.current),y.current.connect(h.current),(u=h.current)==null||u.connect(l.current),(f=l.current)==null||f.toDestination(),()=>{var m,A;(m=l.current)==null||m.disconnect(),(A=l.current)==null||A.dispose()}},[]),o.useEffect(()=>{var u,f,m;(u=y.current)==null||u.set({frequency:_,gain:v}),(f=h.current)==null||f.set({frequency:q,gain:S}),(m=l.current)==null||m.set({frequency:L,gain:D})},[v,S,D]);const $=async()=>{var u;if(!i.current||!a.current){console.error("Oscillator or Analyser is not initialized");return}r?(i.current.stop(),cancelAnimationFrame(P.current),n([]),c(!1)):((u=l.current)==null||u.connect(a.current),i.current.loop=!0,i.current.start(),c(!0),N())},P=o.useRef(0),N=()=>{var f;const u=(f=a.current)==null?void 0:f.getValue();if(u instanceof Float32Array){const m=Array.from(u).map((A,B)=>({frequency:B,amplitude:A}));n(m)}P.current=requestAnimationFrame(N)};return O("div",{className:"w-full flex flex-col items-center gap-2",children:[O(F.Group,{size:50,trackWidth:2,pointerWidth:5,pointerHeight:5,min:-25,max:25,bilateral:!0,children:[t(F,{topLabel:"LOW",bottomLabel:`${v}`,value:v,onChange:H}),t(F,{topLabel:"MID",bottomLabel:`${S}`,value:S,onChange:W}),t(F,{topLabel:"HIGH",bottomLabel:`${D}`,value:D,onChange:j})]}),t(k,{className:"w-full h-52",data:e,fftSize:w,axis:!0,grid:!0,shadow:!0}),t(G,{onClick:$,toggled:r,children:r?"Stop":"Start"})]})},ce=()=>t(z,{code:"<SpectrogramDefault />",scope:{SpectrogramDefault:se},type:"link",url:"https://github.com/codeacme17/echo-ui/blob/main/docs/src/components/Example/SpectrogramDefault.tsx",classNames:{preview:"p-0 px-3 py-5"}}),le=()=>t(z,{code:`<Spectrogram 
  axis 
  amplitudeRange={[-120, 20]} 
  xAxisTicks={[50, 500, 5000]} 
  yAxisTicks={[10, -60, -80]} 
/>`,scope:{Spectrogram:k}}),ue=()=>t(z,{code:`<Spectrogram 
  grid
  amplitudeRange={[-120, 20]} 
  xAxisTicks={[50, 500, 5000]} 
  yAxisTicks={[10, -60, -80]} 
/>`,scope:{Spectrogram:k}}),he=()=>t(z,{code:"<SpectrogramEQ3 />",scope:{SpectrogramEQ3:ne},type:"link",url:"https://github.com/codeacme17/echo-ui/blob/main/docs/src/components/Example/SpectrogramEQ3.tsx",classNames:{preview:"p-0 px-3 py-5"}}),pe=()=>t(U,{data:[{attribute:"data*",description:"Array data passed to the spectrogram(required)",type:t(s,{children:"SpectrogramDataPoint[]"}),default:"-"},{attribute:"fftSize",description:"Size of the Fast Fourier Transform (FFT) (must be a power of 2)",type:t(s,{children:"number"}),default:t(s,{children:"1024"})},{attribute:"amplitudeRange",description:"Amplitude range, this property specifies the range of the Y-axis",type:t(s,{children:"[number, number]"}),default:t(s,{children:"[-100, 10]"})},{attribute:"lineColor",description:"Line color",type:t(s,{children:"string"}),default:t(s,{children:"'var(--echo-primary)'"})},{attribute:"lineWidth",description:"Line width",type:t(s,{children:"number"}),default:t(s,{children:"2"})},{attribute:"axis",description:"Whether to display the axis",type:t(s,{children:"boolean"}),default:t(s,{children:"false"})},{attribute:"axisColor",description:"Axis font color",type:t(s,{children:"string"}),default:t(s,{children:"'var(--echo-muted-foreground)'"})},{attribute:"xAxisTicks",description:"Ticks displayed on the X-axis",type:t(s,{children:"number[]"}),default:t(s,{children:"[50, 100, 200, 500, 1000, 2000, 5000, 10000]"})},{attribute:"yAxisTicks",description:"Ticks displayed on the Y-axis",type:t(s,{children:"number[]"}),default:t(s,{children:"[-80, -60, -20, 0]"})},{attribute:"grid",description:"Whether to display grid lines",type:t(s,{children:"boolean"}),default:t(s,{children:"false"})},{attribute:"gridColor",description:"Grid line color",type:t(s,{children:"string"}),default:t(s,{children:"'var(--echo-background)'"})},{attribute:"shadow",description:"Whether to display shadow",type:t(s,{children:"boolean"}),default:t(s,{children:"false"})},{attribute:"shadowColor",description:"Shadow color",type:t(s,{children:"string"}),default:t(s,{children:"'var(--echo-primary)'"})},{attribute:"shadowDirection",description:"Shadow direction",type:t(s,{children:"'top' | 'bottom'"}),default:t(s,{children:"'bottom'"})},{attribute:"shadowHeight",description:"Shadow height",type:t(s,{children:"number"}),default:t(s,{children:"20"})}]});export{le as A,ce as D,he as E,ue as G,pe as S};
